#!/usr/bin/env bpftrace

#define MAX_TCP_OPTIONS 10

#include <linux/in.h>
#include <linux/in6.h>
#include <linux/skbuff.h>
#include <linux/netdevice.h>
#include <linux/if_ether.h>
#include <linux/ip.h>
#include <linux/ipv6.h>
#include <linux/tcp.h>

   /* This version is supposed to be a "proper" pping clone, aka tracking RTT using the TCP TSval
    * instead of cheating and using the kernel-computed RTT from the TCP stack as I did in pping_cheat.bt
    *
    * REQUIREMENTS: Unlike the previous tools I've done this one requires a more recent version of bpftrace,
    * as it makes use of (bounded) while loops and the sizeof function that were introduced in v0.11.0,
    * as well as return and dereferencing of pointers which I don't seem to be available in version 0.9.4 at least.
    * I have personally used the docker image of bpftrace v0.11.4 when using it.
    *
    * TODO: 
    * - Add tracking of minimum RTT and histograms
    */

/* Record TSval on transmit */
tracepoint:net:net_dev_start_xmit
{
  $skb = (struct sk_buff*)args->skbaddr;
  @send_layer3[args->protocol] = count();
  //Parse IPv4-header
  if (args->protocol == ETH_P_IP) { 
    $iph = (struct iphdr *)($skb->head + $skb->network_header);
    $saddr = ntop(AF_INET, $iph->saddr);
    $daddr = ntop(AF_INET, $iph->daddr);
    $proto = $iph->protocol;
    //Parse IPv6-header
  } else if (args->protocol == ETH_P_IPV6) {
    $ip6h = (struct ipv6hdr *)($skb->head + $skb->network_header);
    $saddr = ntop(AF_INET6, $ip6h->saddr);
    $daddr = ntop(AF_INET6, $ip6h->daddr);
    $proto = $ip6h->nexthdr;
  } else { // Not IPv4 or IPv6 - abort
    return;
  }
  @send_layer4[$proto] = count();
  if ($proto != IPPROTO_TCP) { // Not TCP - abort
    return;
  }
  //Parse TCP-header
  $tcph = (struct tcphdr *)($skb->head + $skb->transport_header);
  $sport = ($tcph->source >> 8) | (($tcph->source << 8) & 0xff00);
  $dport = ($tcph->dest >> 8) | (($tcph->dest << 8) & 0xff00);
  @flows[$saddr, $sport, $daddr, $dport]++;

  // Unidirectional flow or no TCP-options - abort
  if (@flows[$daddr, $dport, $saddr, $sport] == 0 || $tcph->doff <= 5) {
    return;
  }
    
  /* Parsing the TCP options looking for timestap
   * 
   * bpftrace does byte pointer arithmetic, will have to cast tcph to int8* otherwise
   */
  $opttype = (int8 *)($tcph + sizeof(struct tcphdr)); //Pointer to option-type
  $end = $tcph + ($tcph->doff << 2);  // Calculate end of TCP header here to avoid doing it in loop
  $optcounter = 0;
  while($optcounter < MAX_TCP_OPTIONS) {
    $optcounter++;
    if ($opttype >= $end || *$opttype == 0) { // End of TCP options
      break;
    }
    if (*$opttype == 1) { // NOP Option - move to next byte
      $opttype = (int8 *)($opttype + 1);
      continue;
    }
    if (*$opttype == 8) { //Has timestamp
      $tsval = *(uint32)($opttype+2);
      if ($tsval &&  // Only add timestamp first time it's seen for the flow
	  !@start[$saddr, $sport,$daddr, $dport, $tsval] &&
	  !@used_ts[$saddr, $sport, $daddr, $dport, $tsval]) {
	@start[$saddr, $sport,
	       $daddr, $dport, $tsval] = nsecs;
      }
      break;
    }
    else { //Some other TCP option - Move ahead option-length bytes
      $opttype = (int8 *)($opttype + *($opttype+1));
    }
  }
}

/* Check for matching TSecr on reply*/
// Largely a copy-past of the transmit path, but can't use functions so...
tracepoint:net:netif_receive_skb
{
  $skb = (struct sk_buff *)args->skbaddr;
  $protocol = ($skb->protocol >> 8) | (($skb->protocol << 8) & 0xff00); //ntohs
  @recv_layer3[$protocol] = count();
  if ($protocol == ETH_P_IP) { 
    $iph = (struct iphdr *)($skb->head + $skb->network_header);
    $saddr = ntop(AF_INET, $iph->saddr);
    $daddr = ntop(AF_INET, $iph->daddr);
    $proto = $iph->protocol;
    //Parse IPv6-header
  } else if ($protocol == ETH_P_IPV6) {
    $ip6h = (struct ipv6hdr *)($skb->head + $skb->network_header);
    $saddr = ntop(AF_INET6, $ip6h->saddr);
    $daddr = ntop(AF_INET6, $ip6h->daddr);
    $proto = $ip6h->nexthdr;
  } else { // Not IPv4 or IPv6 - abort
    return;
  }
  @recv_layer4[$proto] = count();
  if ($proto != IPPROTO_TCP) { // Not TCP - abort
    return;
  }
  
  //Parse TCP-header
  $tcph = (struct tcphdr *)($skb->head + $skb->transport_header);
  $sport = ($tcph->source >> 8) | (($tcph->source << 8) & 0xff00);
  $dport = ($tcph->dest >> 8) | (($tcph->dest << 8) & 0xff00);
  @flows[$saddr, $sport, $daddr, $dport]++;

  // Unidirectional flow or no TCP options
  if (@flows[$daddr, $dport, $saddr, $sport] == 0 || $tcph->doff <= 5) {
    return;
  }

  $opttype = (int8 *)($tcph + sizeof(struct tcphdr)); //Pointer to option-type
  $end = $tcph + ($tcph->doff << 2);  // Calculate end of TCP header here to avoid doing it in loop
  $optcounter = 0;
  while($optcounter < MAX_TCP_OPTIONS) {
    $optcounter++;
    if ($opttype >= $end || *$opttype == 0) {
      break;
    }
    if (*$opttype == 1) { // NOP Option - move to next byte
      $opttype = (int8 *)($opttype + 1);
      continue;
    }
    if (*$opttype == 8) { //Has timestamp
      $tsecr = *(uint32)($opttype+6);
      // Check if timestamp has been recorded, if so calculate RTT
      if ($tsecr && @start[$daddr, $dport,
			   $saddr, $sport, $tsecr]) {
	$rtt = (nsecs - @start[$daddr, $dport,
			       $saddr, $sport, $tsecr]) / 1000;
	// Print RTT message
	if ($rtt / 1000 >= $1) {
	  time("%H:%M:%S ");
	  printf("%d.%03d ms %s:%d+%s:%d\n", $rtt / 1000, $rtt % 1000, $saddr, $sport,
		 $daddr, $dport);
	}
	delete(@start[$daddr, $dport, $saddr, $sport, $tsecr]);
	@used_ts[$daddr, $dport, $saddr, $sport, $tsecr] = 1;
      } 
      break;
    }
    else { //Some other TCP option - Move ahead option-length bytes
      $opttype = (int8 *)($opttype + *($opttype+1));
    }
  }
}


interval:s:10
{
  // Can't loop through map to only clear used TS-values that are older than 10s like in original pping
  // Simply clears all used TS every 10s, so TS that were added just before this clear could potentially be
  // reused which could potentially lead to a too short RTT being reported
  clear(@used_ts);
}

END
{
  clear(@start);
  clear(@used_ts);
}

