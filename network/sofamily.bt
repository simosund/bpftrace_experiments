#!/usr/bin/env bpftrace

#include <linux/socket.h>

BEGIN
{
  printf("Tracing socket connect/accepts. Ctrl-C to end\n");
  //from linux/socket.h
  @fam2str[AF_UNSPEC] = "AF_UNSPEC";
  @fam2str[AF_UNIX] = "AF_UNIX";
  @fam2str[AF_INET] = "AF_INET";
  @fam2str[AF_INET6] = "AF_INET6";
}

tracepoint:syscalls:sys_enter_connect
{
  @connect[comm, args->uservaddr->sa_family, @fam2str[args->uservaddr->sa_family]] = count();
}

tracepoint:syscalls:sys_enter_accept,
tracepoint:syscalls:sys_enter_accept4
{
  //sockaddr is populated during the system call, so must read at end of system call
  @sockaddr[tid] = args->upeer_sockaddr;
}

tracepoint:syscalls:sys_exit_accept,
tracepoint:syscalls:sys_exit_accept4
/@sockaddr[tid]/     
{
  // sockaddr contents only valid if system call sucessful
  if (args->ret > 0) {
    $sa = (struct sockaddr*)@sockaddr[tid];
    @accept[comm, $sa->sa_family, @fam2str[$sa->sa_family]] = count();
  }
  delete(@sockaddr[tid]);
}

END
{
  clear(@sockaddr); clear(@fam2str);
}
