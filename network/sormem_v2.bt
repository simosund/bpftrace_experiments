#!/usr/bin/env bpftrace

#include <net/sock.h>

   //Shows output as a single "percentage of limit" histogram instead of two separate histograms of allocation and limit sizes

#define BIN_SIZE 5

BEGIN
{
  printf("Tracing socket receive buffer size. Hit Ctrl-C to end\n");
}

kprobe:sock_recvmsg
{
  $sock = ((struct socket *)arg0)->sk;
  
  $alloc = (uint64)($sock->sk_backlog.rmem_alloc.counter);
  $limit = (uint64)($sock->sk_rcvbuf & 0xffffffff);
  @rcvbuffer_util = lhist(100*$alloc / $limit, 0, 101, BIN_SIZE);
}

tracepoint:sock:sock_rcvqueue_full
{
  printf("%s rmem_alloc %d -> rcvbuf %d, skb size %d\n", probe,
	 args->rmem_alloc, args->sk_rcvbuf, args->truesize);
}

tracepoint:sock:sock_exceed_buf_limit
{
  printf("%s rmem_alloc %d, allocated %d\n", probe,
	 args->rmem_alloc, args->allocated);
}

	 
