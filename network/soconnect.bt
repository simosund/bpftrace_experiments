#!/usr/bin/env bpftrace

#include <linux/in.h>
#include <linux/in6.h>

BEGIN
{
  printf("%-6s %-16s FAM %-16s %-5s %8s %s\n", "PID", "PROCESS",
	 "ADDRESS", "PORT", "LAT(us)", "RESULT");
  // connect(2) has more details:
  @err2str[0] = "Success";
  @err2str[EPERM] = "Permission denied";
  @err2str[EINTR] = "Interrupted";
  @err2str[EBADF] = "Invalid sockfd";
  @err2str[EAGAIN] = "Routing cache insuff.";
  @err2str[EACCES] = "Perm. denied (EACCES)";
  @err2str[EFAULT] = "Sock struct addr invalid";
  @err2str[ENOTSOCK] = "FD not a socket";
  @err2str[EPROTOTYPE] = "Socket protocol error";
  @err2str[EAFNOSUPPORT] = "Address family invalid";
  @err2str[EADDRINUSE] = "Local addr in use";
  @err2str[EADDRNOTAVAIL] = "No port available";
  @err2str[ENETUNREACH] = "Network unreachable";
  @err2str[EISCONN] = "Already connected";
  @err2str[ETIMEDOUT] = "Timeout";
  @err2str[ECONNREFUSED] = "Connect refused";
  @err2str[EALREADY] = "Not yet completed";
  @err2str[EINPROGRESS] = "In progress";
}

tracepoint:syscalls:sys_enter_connect
/args->uservaddr->sa_family == AF_INET || args->uservaddr->sa_family == AF_INET6/
{
  @socketaddr[tid] = args->uservaddr;
  @start[tid] = nsecs;
}

tracepoint:syscalls:sys_exit_connect
/@start[tid]/
{
  $dur_us = (nsecs - @start[tid]) / 1000;
  printf("%-6d %-16s %-3d ", pid, comm, @socketaddr[tid]->sa_family);

  if (@socketaddr[tid]->sa_family == AF_INET) {
    $s = (struct sockaddr_in *)@socketaddr[tid];
    $port = ($s->sin_port >> 8) | (($s->sin_port << 8) & 0xff00);
    $junk = $s->sin_port; // Bug workaround for #1305
    printf("%-16s %-5d %8d %s\n", ntop(AF_INET, $s->sin_addr.s_addr),
	   $port, $dur_us, @err2str[- args->ret]);
  }
  else {
    $s6 = (struct sockaddr_in6 *)@socketaddr[tid];
    $port = ($s6->sin6_port >> 8) | (($s6->sin6_port << 8) & 0xff00);
    $junk = $s6->sin6_port; // Bug workaround for #1305
    printf("%-16s %-5d %8d %s\n", ntop(AF_INET6, $s6->sin6_addr.in6_u.u6_addr8),
	   $port, $dur_us, @err2str[- args->ret]);
  }

  delete(@socketaddr[tid]);
  delete(@start[tid]);
}

END
{
  clear(@err2str); clear(@socketaddr); clear(@start);
}
